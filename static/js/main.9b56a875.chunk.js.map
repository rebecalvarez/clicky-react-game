{"version":3,"sources":["logo.svg","components/PictureCard/PictureCard.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","PictureCard","props","react_default","a","createElement","className","alt","name","src","image","onClick","clickPicture","id","Wrapper","shakeWrapper","pictures","App","state","cards","clickedArray","topScore","score","message","shakeit","shuffleArray","_this","setState","includes","concat","picturesArray","i","length","j","Math","floor","random","_ref","_this2","this","logo","components_Wrapper","map","picture","components_PictureCard_PictureCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b56a875.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./PictureCard.css\";\r\n\r\nconst PictureCard = props => (\r\n    <div className=\"card\">\r\n    <div className=\"img-container\">\r\n    <img className=\"img-thumbnail img-responsive\" alt={props.name} src={props.image} \r\n         onClick={()=> props.clickPicture(props.id)}/>\r\n    </div>\r\n    </div>\r\n);\r\n\r\nexport default PictureCard;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className= {props.shakeWrapper===\"true\" ? \"wrapperShake\" : \"wrapper\"}>{props.pictures}</div>;\r\n\r\nexport default Wrapper;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PictureCard from \"./components/PictureCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport cards from \"./cards.json\";\n\n\n\nclass App extends Component {\n  //Setting this.state.cards to the cards json array\n  state = {\n    cards,\n    clickedArray: [],\n    topScore: 0,\n    score:0,\n    message: \"\",\n    shakeit: \"false\"\n  };\n\n  clickPicture = id => {\n    //arrange the pictures randomly\n    const shuffleArray = this.shuffleArray(cards);\n    this.setState({cards:shuffleArray});\n    //if clicked an image already clicked set this.state.score = 0\n    if (this.state.clickedArray.includes(id)){\n      this.setState({score: 0, clickedArray:[], message: \"Sorry, start the game again!\", shakeit: \"true\"});\n    }  \n    else {\n      this.setState({\n        clickedArray: this.state.clickedArray.concat([id]),\n        score: this.state.score + 1,\n      message: \"Correct!\",\n        shakeit: \"false\"\n      });\n    }\n\n    if(this.state.score === 14 ) {\n      this.setState({\n        topScore: this.state.score,\n        clickedArray:[],\n        message: \"Congratulations, You Won the game! You can keep playing and adding to the top score\",\n        shakeit: \"true\"\n      });}\n    // set topscore = score if score > topscore.\n    if(this.state.score > this.state.topScore) {\n      this.setState({topScore: this.state.score});\n    }\n    // shake the wrapper if shakeit it set to true\n    \n  }\n\n  shuffleArray = (picturesArray)=> {\n    for (let i = picturesArray.length - 1; i > 0; i-- ){\n      const j = Math.floor(Math.random() * (i + 1));\n      [picturesArray[i],picturesArray[j]] = [picturesArray[j],picturesArray[i]];\n    }\n    return picturesArray;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <header className=\"App-header  sticky-top\">\n      <div className=\"text-center\"><img src={logo} className = \"App-logo\" alt=\"logo\"/>\n     <h2 className=\"App-title\">Welcome to React Clicky Game</h2>\n     <p className=\"score\"><strong>Score: {this.state.score} | TopScore: {this.state.topScore}</strong></p>\n     </div>\n     \n     \n      </header>\n      <div className=\"banner\">\n      <h3 className=\"App-intro\">\n      <strong className=\"instructions\">Click on the image to earn points, but don't click it more than once!</strong>\n      </h3>\n      <h2 className=\"message\"><strong> {this.state.message}</strong></h2>\n      </div>\n  <Wrapper\n      shakeWrapper = {this.state.shakeit}\n      pictures = {this.state.cards.map(picture => (\n        <PictureCard\n            clickPicture = {this.clickPicture}\n            id = {picture.id}\n            key = {picture.id} // to get rid of the unique key prop warning\n            name = {picture.name}\n            image = {picture.image}\n            />\n      ))}\n  />\n  <footer className=\"footer\">\n  <div className=\"container\">\n        <span className=\"text-muted\">&copy; Rebeca Dodero - React App - Clicky Game</span>\n  </div>\n  </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}